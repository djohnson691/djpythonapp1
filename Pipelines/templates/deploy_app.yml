
parameters:
- name: resourceGroupTFStateFile
  default: ''
- name: storageAccountNameTFSStateFile
  default: ''
- name: resourceGroup
  default: ''
- name: appServicePlanName
  default: ''
- name: appInsightsName
  default: ''
- name: appServiceName
  default: ''
- name: pythonVersion
  default: ''
- name: vmImageName
  default: ''
- name: environmentName
  default: ''
- name: azureServiceConnectionId
  default: ''
- name: terraformVersion
  default: '1.1.3'
- name: terraformWorkingDirectory
  default: $(System.DefaultWorkingDirectory)/Terraform
- name: startUpCommand
  default: 'gunicorn --bind=0.0.0.0 --timeout 600 --chdir Application app:app'

stages:
- stage: DeployTF  #using provider at https://github.com/charleszipp/azure-pipelines-tasks-terraform/
  displayName: Deploy Stage
  jobs:
  - job: DeployTF
    pool:
      vmImage: ${{parameters.vmImageName}}
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: ${{parameters.terraformVersion}}
      displayName: 'Install Terraform ${{parameters.terraformVersion}}'
    - task: TerraformCLI@0
      displayName: "Terraform Init"
      inputs:
        command: init
        backendType: azurerm
        workingDirectory: ${{parameters.terraformWorkingDirectory}}
        backendServiceArm: 'djpythonapp1_serviceprincipalserviceconnection'
        ensureBackend: true
        backendAzureRmResourceGroupName: ${{parameters.resourceGroupTFStateFile}}
        backendAzureRmResourceGroupLocation: centralus
        backendAzureRmStorageAccountName: ${{parameters.storageAccountNameTFSStateFile}}
        backendAzureRmStorageAccountSku: LRS
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: djpythonapp1.tfstate
    - task: TerraformCLI@0
      displayName: "Terraform Apply"
      inputs:
        command: apply
        commandOptions: -var="resource_group_name=${{parameters.resourceGroup}}" -var="app_service_plan_name=${{parameters.appServicePlanName}}" -var="app_insights_name=${{parameters.appInsightsName}}" -var="app_service_name=${{parameters.appServiceName}}"
        environmentServiceName: 'djpythonapp1_serviceprincipalserviceconnection'
        workingDirectory: ${{parameters.terraformWorkingDirectory}}
- stage: DeployApp
  displayName: 'Deploy Web App'
  dependsOn: 
    - Build
    - DeployTF
  condition: succeeded()
  jobs:
    - deployment: DeploymentJob
      pool:
        vmImage: ${{parameters.vmImageName}}
      environment: ${{parameters.environmentName}}
      strategy:
        runOnce:
          deploy:
            steps:
  
            - task: UsePythonVersion@0
              inputs:
                versionSpec: '${{parameters.pythonVersion}}'
              displayName: 'Use Python version ${{parameters.pythonVersion}}'
  
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App : djpythonapp1'
              inputs:
                azureSubscription: ${{parameters.azureServiceConnectionId}}
                appName: ${{parameters.appServiceName}}
                appType: webAppLinux
                package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
                startUpCommand: ${{parameters.startUpCommand}}


parameters:
- name: resourceGroupTFStateFile
  default: ''
- name: storageAccountNameTFSStateFile
  default: ''
- name: resourceGroup
  default: ''
- name: appServicePlanName
  default: ''
- name: appInsightsName
  default: ''
- name: appServiceName
  default: ''
- name: pythonVersion
  default: ''
- name: azureServiceConnectionId
  default: ''
- name: terraformVersion
  default: '1.1.3'
- name: terraformWorkingDirectory
  default: $(System.DefaultWorkingDirectory)/Terraform
- name: startUpCommand
  default: 'gunicorn --bind=0.0.0.0 --timeout 600 --chdir Application app:app'
  type: object
- name: location
  default: ''
- name: buildId
  default: $(Build.BuildId)

steps:
- task: TerraformInstaller@0 #using provider at https://github.com/charleszipp/azure-pipelines-tasks-terraform/
  displayName: 'Install Terraform ${{parameters.terraformVersion}}'
  inputs:
        terraformVersion: ${{parameters.terraformVersion}}
- task: TerraformCLI@0
  displayName: "Terraform Init"
  inputs:
    command: init
    backendType: azurerm
    workingDirectory: ${{parameters.terraformWorkingDirectory}}
    backendServiceArm: 'djpythonapp1_serviceprincipalserviceconnection'
    ensureBackend: true
    backendAzureRmResourceGroupName: ${{parameters.resourceGroupTFStateFile}}
    backendAzureRmResourceGroupLocation: centralus
    backendAzureRmStorageAccountName: ${{parameters.storageAccountNameTFSStateFile}}
    backendAzureRmStorageAccountSku: LRS
    backendAzureRmContainerName: tfstate
    backendAzureRmKey: djpythonapp1.tfstate
- task: TerraformCLI@0
  displayName: "Terraform Apply"
  inputs:
    command: apply
    commandOptions: -var="resource_group_name=${{parameters.resourceGroup}}" -var="app_service_plan_name=${{parameters.appServicePlanName}}" -var="app_insights_name=${{parameters.appInsightsName}}" -var="app_service_name=${{parameters.appServiceName}}" -var="location=${{parameters.location}}"
    environmentServiceName: 'djpythonapp1_serviceprincipalserviceconnection'
    workingDirectory: ${{parameters.terraformWorkingDirectory}}
- task: UsePythonVersion@0
  inputs:
    versionSpec: '${{parameters.pythonVersion}}'
  displayName: 'Use Python version ${{parameters.pythonVersion}}'
- task: AzureWebApp@1
  displayName: 'Deploy Azure Web App : ${{parameters.appServiceName}}'
  inputs:
    azureSubscription: ${{parameters.azureServiceConnectionId}}
    appName: ${{parameters.appServiceName}}
    appType: webAppLinux
    package: $(Pipeline.Workspace)/drop/${{parameters.buildID}}.zip
    startUpCommand: ${{parameters.startUpCommand}}
